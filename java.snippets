# Copied from UltiSnips:
# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.
global !p
def nl(snip):
    if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
        snip += ""
    else:
        snip.rv += " "
endglobal

snippet pro "protected" !w
protected 
endsnippet

snippet elif "else if" !w
else if ($1)`!p nl(snip)`{
	$0
}
endsnippet

snippet el "else" !w
else`!p nl(snip)`{
	$0
}
endsnippet

snippet try "try" b
try`!p nl(snip)`{
	$0
} catch ( ${1:Exception} ${2:e}p )`!p nl(snip)`{
	$3
}
endsnippet

snippet ca "catch" w
catch ( ${1:Exception} ${2:e} )`!p nl(snip)`{
	$0
}
endsnippet

snippet cos "constant string" !b
public static final String ${1:var} = "$2";$0
endsnippet

snippet co "constant" !b
public static final ${1:String} ${2:var} = $3;$0
endsnippet

snippet m "method" !b
/**
 * ${7:Method Description}
 * ${5}
 * @return ${6}
 */
${1:public} ${2:void} ${3:methodName}(${4})`!p nl(snip)`{
	${8}
}
endsnippet

snippet mem "Generate a member variable" b
${1:protected} final ${2:String} _${3:name};$0
endsnippet

snippet acc "Generate accessor and setter" b
/**
 * Sets $3
 *
 * @param $2 is the new value for $3
 */
public void set${2/.*/\u$0/}( ${1:Type} ${2:name} ) {
	${3:_$2} = $2;
}

/**
 * Returns $3
 *
 * @return $3
 */
public $1 get${2/.*/\u$0/}() {
	return $3;
}
$0
endsnippet

# vim:ft=snippets:
