# Copied from UltiSnips:
# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.
global !p
def nl(snip):
    if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
        snip += ""
    else:
        snip.rv += " "

def memvar_ref(snip):
	prefix = snip.opt("g:ultisnips_java_member_variable_prefix", "")
	if prefix == "":
		snip.rv += "this."
	else:
		snip.rv += prefix

def fpad(snip):
	if snip.opt("g:ultisnips_java_functions_padded", False):
		snip.rv += " "

endglobal

snippet perr "printerr"  b
System.err.println($1);$0
endsnippet

snippet pro "protected" !w
protected 
endsnippet

snippet elif "else if" !w
else if ($1)`!p nl(snip)`{
	$0
}
endsnippet

snippet el "else" !w
else`!p nl(snip)`{
	$0
}
endsnippet

snippet try "try" b
try`!p nl(snip)`{
	$0
} catch (`!p fpad(snip)`${1:Exception} ${2:e}`!p fpad(snip)`)`!p nl(snip)`{
	$3
}
endsnippet

snippet ca "catch" w
catch (`!p fpad(snip)`${1:Exception} ${2:e}`!p fpad(snip)`)`!p nl(snip)`{
	$0
}
endsnippet

snippet cos "constant string" !b
public static final String ${1:VAR} = "$2";$0
endsnippet

snippet co "constant" !b
public static final ${1:String} ${2:VAR} = $3;$0
endsnippet

snippet mem "Generate a member variable" b
${1:`!p snip.rv += snip.opt("g:ultisnips_java_member_variable_access", "private")` }`!p if snip.opt("g:ultisnips_java_members_final", "") == "yes": snip.rv += "final "`${3:String} `!p snip.rv += snip.opt("g:ultisnips_java_member_variable_prefix", "")`${4:name};$0
endsnippet

snippet fmem "Generate a final member variable" b
${1:`!p snip.rv += snip.opt("g:ultisnips_java_member_variable_access", "private")` }final ${3:String} `!p snip.rv += snip.opt("g:ultisnips_java_member_variable_prefix", "")`${4:name};$0
endsnippet

snippet getset "Generate accessor and setter" b
/**
 * Sets $3
 *
 * @param $2 is the new value for $3
 */
public void set${2/.*/\u$0/}(`!p fpad(snip)`${1:Type} ${2:name}`!p fpad(snip)`)`!p nl(snip)`{
	${3:`!p memvar_ref(snip)`$2} = $2;
}

/**
 * Returns $3
 *
 * @return $3
 */
public $1 get${2/.*/\u$0/}()`!p nl(snip)`{
	return $3;
}
$0
endsnippet

snippet acc "Generate accessor" b
/**
 * Returns $2
 *
 * @return $2
 */
public ${1:String} get${2/.*/\u$0/}()`!p nl(snip)`{
	return `!p memvar_ref(snip)`${2:name};
}
$0
endsnippet

snippet m "method" !b
/**
 * ${7:Method Description}
 */
${1:public }${2:void} ${3:methodName}(${4})`!p nl(snip)`{
	${8}
}
endsnippet

snippet am "abstract method" !b
/**
 * ${8:Method Description}
 */
${1:public }abstract ${3:void} ${4:methodName}(${5});
${9}
endsnippet

snippet ifm "interface method" !b
/**
 * ${8:Method Description}
 */
`!p snip.opt("g:ultisnips_java_iface_access", "")`${3:void} ${4:methodName}(${5});
${9}
endsnippet

snippet ctor "Constructor" !b
/**
 * ${6:Constructor} ${7}
 */
${1:public }${3:`!p snip.rv = snip.basename or "untitled"`}(${4})`!p nl(snip)`{
	$0
}
endsnippet

snippet iface "Interface" !b
package ${7};

/**
 * ${6:Description}
 */
public interface ${1:`!p
snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }{
	$0
}
endsnippet

snippet ise "Illegal State Exception" !b
throw new IllegalStateException(${1});${2}
endsnippet

snippet iae "Illegal Argument Exception" !b
throw new IllegalArgumentException(${1});${2}
endsnippet

snippet npe "Null check" !b
if ( null == ${1} ) {
	throw new NullPointerException( "$1 cannot be null" );
}${2}
endsnippet

snippet cl "class" !b
package ${7};

/**
 * ${6:Description}
 */
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }${4:implements ${5:Interface} }{
	$0
}
endsnippet

snippet ic "inner class" b
/**
 * ${7:Description}
 */
${1:public }class ${2:Name} ${3:extends ${4:Parent} }${5:implements ${6:Interface} }{
	$0
}
endsnippet

# vim:ft=snippets:
